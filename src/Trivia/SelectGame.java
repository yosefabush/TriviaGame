/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Trivia;

import TriviaGameServer.Server;
import TriviaGameServer.ThreadHandler;
import java.awt.Toolkit;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author lidor
 */
public class SelectGame extends javax.swing.JFrame {

    PlaySounds bacgroundSound;
    static User current;
    static DataInputStream input = null;
    Socket clientSocket = null;
    static PrintStream output = null;
    MusicClass Mp3ClassPlayer = new MusicClass();
    public static int count = 1;
    int xMouse;
    int yMouse;
    static boolean firstTime = false;
    static boolean soundPlaying = false;
    static boolean oneVsOneSelcted = true;
    static ObjectInputStream ois;
    static ObjectOutputStream oos;
    int width = (Toolkit.getDefaultToolkit().getScreenSize().width / 2) - 185;
    int height = Toolkit.getDefaultToolkit().getScreenSize().height - 180;
    boolean moreDataAvailable = true;
    boolean dataFromServer = true;

    /**
     * Creates new form SelectGame1
     */
    public SelectGame(User curentPlayer) {
        initComponents();
        this.current = curentPlayer;
        this.setSize(660, 345);
        setLocationRelativeTo(null);
        if (!firstTime) {
            loadDefultSound();
            firstTime = true;
            soundPlaying = true;
        }
        title.setText(current.getUserName());
        //bacgroundSound = new PlaySounds("C:\\Users\\Yosef\\Documents\\NetBeansProjects\\Java\\TriviaGame1\\src\\Trivia\\Sounds\\ChillingMusic.wav");
        /*AudioInputStream audioInputStream=null;
        try {
            audioInputStream = AudioSystem.getAudioInputStream(
                    new File("C:\\\\Users\\\\Yosef\\\\Documents\\\\NetBeansProjects\\\\Java\\\\TriviaGame1\\\\src\\\\Trivia\\\\Sounds\\\\ChillingMusic.wav"));
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(SelectGame1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SelectGame1.class.getName()).log(Level.SEVERE, null, ex);
        }
        Clip clip=null;
        try {
            clip = AudioSystem.getClip();
        } catch (LineUnavailableException ex) {
            Logger.getLogger(SelectGame1.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            clip.open(audioInputStream);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(SelectGame1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SelectGame1.class.getName()).log(Level.SEVERE, null, ex);
        }
        FloatControl gainControl = 
        (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
        gainControl.setValue(-10.0f); // Reduce volume by 10 decibels.
        clip.start();*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LogOutBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        chooseFile = new javax.swing.JLabel();
        pause = new javax.swing.JLabel();
        play = new javax.swing.JLabel();
        stop = new javax.swing.JLabel();
        loopPlay = new javax.swing.JLabel();
        background = new javax.swing.JLabel();
        VolumControl = new javax.swing.JSlider();
        soundVolume = new javax.swing.JLabel();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        LogOutBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Trivia/Images/logout.png"))); // NOI18N
        LogOutBtn.setBorder(null);
        LogOutBtn.setContentAreaFilled(false);
        LogOutBtn.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        LogOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogOutBtnActionPerformed(evt);
            }
        });
        getContentPane().add(LogOutBtn);
        LogOutBtn.setBounds(570, 240, 70, 70);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Trivia/Images/1vs1n.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(270, 110, 200, 70);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Trivia/Images/Singleplayer_Button.png"))); // NOI18N
        jButton2.setBorder(null);
        jButton2.setContentAreaFilled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(250, 180, 240, 60);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel2.setText("Select game");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(300, 50, 150, 50);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Trivia/Images/headgears1.gif"))); // NOI18N
        getContentPane().add(jLabel3);
        jLabel3.setBounds(-10, 0, 370, 400);
        getContentPane().add(title);
        title.setBounds(210, 10, 260, 30);

        chooseFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                chooseFileMouseReleased(evt);
            }
        });
        getContentPane().add(chooseFile);
        chooseFile.setBounds(620, 14, 20, 50);

        pause.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pauseMouseReleased(evt);
            }
        });
        getContentPane().add(pause);
        pause.setBounds(580, 14, 30, 50);

        play.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                playMouseReleased(evt);
            }
        });
        getContentPane().add(play);
        play.setBounds(540, 14, 30, 60);

        stop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                stopMouseReleased(evt);
            }
        });
        getContentPane().add(stop);
        stop.setBounds(500, 10, 30, 60);

        loopPlay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                loopPlayMouseReleased(evt);
            }
        });
        getContentPane().add(loopPlay);
        loopPlay.setBounds(470, 10, 20, 60);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Trivia/Images/BackgroundPlayer.png"))); // NOI18N
        background.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                backgroundMousePressed(evt);
            }
        });
        background.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                backgroundMouseDragged(evt);
            }
        });
        getContentPane().add(background);
        background.setBounds(470, 0, 190, 60);

        VolumControl.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                VolumControlStateChanged(evt);
            }
        });
        getContentPane().add(VolumControl);
        VolumControl.setBounds(460, 70, 200, 26);
        getContentPane().add(soundVolume);
        soundVolume.setBounds(540, 100, 40, 20);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Trivia/Images/OpenScreenIcon22.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 660, 320);
        getContentPane().add(jPanel1);
        jPanel1.setBounds(140, 0, 100, 100);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Trivia/Images/LoadingWait.gif"))); // NOI18N
        jLabel4.setText("jLabel4");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(510, 180, 280, 170);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void loadDefultSound() {
        Mp3ClassPlayer.Stop();
        Mp3ClassPlayer.Play("C:\\Users\\Yosef\\Documents\\NetBeansProjects\\Java\\TriviaGame1\\src\\Trivia\\Sounds\\ChillingMusic.mp3" + "");
    }

    private void LogOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogOutBtnActionPerformed
        Mp3ClassPlayer.Stop();
        this.dispose();
        LogIn loGin = new LogIn();
        loGin.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_LogOutBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Mp3ClassPlayer.Stop();

//        if(TriviaGameServer.Server.serverIsActivate){
//             JOptionPane.showMessageDialog(this, "Please Run Server first");
//            return;
//        }
        System.out.println();
        System.out.println("*************************************");
        System.out.println("Client side");
        System.out.println("*************************************");

        try {
            moreDataAvailable = false;
            // create a connection to the server socket
            Socket clientSocket = new Socket("localhost", Server.port);

            System.out.println("Connected to Server!");
            System.out.println();
            System.out.println("Waiting for server to find one more player");
            System.out.println();
            ois = new ObjectInputStream(clientSocket.getInputStream());

            oos = new ObjectOutputStream(clientSocket.getOutputStream());

//            Thread thread = new Thread(new Runnable() {
//                @Override
//                public void run() {
//                    while (!Thread.interrupted()) {
//                        try {
//                            if (ois.readObject().toString().equals("Start")) {
//                                try {
//                                    Game game = new Game(2, current, true, 1);
//                                    break;
//                                } catch (Exception ex) {
//                                    Logger.getLogger(SelectGame.class.getName()).log(Level.SEVERE, null, ex);
//                                }
//                            }
//                        } catch (IOException ex) {
//                            Logger.getLogger(SelectGame.class.getName()).log(Level.SEVERE, null, ex);
//                        } catch (ClassNotFoundException ex) {
//                            Logger.getLogger(SelectGame.class.getName()).log(Level.SEVERE, null, ex);
//                        }
//                    }
//                }
//            });
//            thread.start();
            try {
                if (ois.readObject().toString().equals("Start")) {
                    try {
                        Game game = new Game(2, current, true, 1);
                    } catch (Exception ex) {
                        Logger.getLogger(SelectGame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(SelectGame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(SelectGame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
//            do {
//                System.out.println("cheek if this or other player finish play");
//                if (ThreadHandler.twoPlayerFinishCnt != 0) {
//                    try {
//                        JOptionPane.showMessageDialog(this, ois.readObject());
//                       // System.out.println(ois.readObject());
//                         break;
//                    } catch (IOException ex) {
//                        Logger.getLogger(SelectGame.class.getName()).log(Level.SEVERE, null, ex);
//                    } catch (ClassNotFoundException ex) {
//                        Logger.getLogger(SelectGame.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                    System.out.println("Game Over!");
//                } else {
//                    System.out.println("Still not Game over");
//                }
//            } while (ThreadHandler.twoPlayerFinishCnt != 2);

//            Thread thread = new Thread(new Runnable() {
//                @Override
//                public void run() {
//                    do {
//                        System.out.println("cheek if Game is Over");
//                        if (ThreadHandler.twoPlayerFinishCnt != 0) {
//                            try {
//                                //JOptionPane.showMessageDialog(this, ois.readObject());
//                                System.out.println(ois.readObject());
//                            } catch (IOException ex) {
//                                Logger.getLogger(SelectGame.class.getName()).log(Level.SEVERE, null, ex);
//                            } catch (ClassNotFoundException ex) {
//                                Logger.getLogger(SelectGame.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            System.out.println("Game Over!");
//                        } else {
//                            System.out.println("Still not Game over");
//                        }
//                    } while (ThreadHandler.twoPlayerFinishCnt != 2);
//                }
//        });
//        thread.start();
        } catch (IOException ex) {
            Logger.getLogger(SelectGame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Mp3ClassPlayer.Stop();
        firstTime = false;
        OpenScreen newGame = new OpenScreen(current);
        newGame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void backgroundMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backgroundMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();

        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_backgroundMouseDragged

    private void backgroundMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backgroundMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_backgroundMousePressed

    private void stopMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopMouseReleased
        soundPlaying = false;
        Mp3ClassPlayer.Stop();    }//GEN-LAST:event_stopMouseReleased

    private void playMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playMouseReleased
        if (!soundPlaying) {
            Mp3ClassPlayer.Resume();
            soundPlaying = true;
        }

    }//GEN-LAST:event_playMouseReleased

    private void pauseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pauseMouseReleased
        try {
            // TODO add your handling code here:
            Mp3ClassPlayer.Pause();
            soundPlaying = false;
        } catch (IOException ex) {
            Logger.getLogger(SelectGame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pauseMouseReleased

    private void chooseFileMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chooseFileMouseReleased
        FileFilter filter = new FileNameExtensionFilter("MP3 Files", "mp3", "mpeg3");

        JFileChooser chooser = new JFileChooser("C:\\Music");
        chooser.addChoosableFileFilter(filter);

        int returnVal = chooser.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            Mp3ClassPlayer.Stop();
            File myFile = chooser.getSelectedFile();
            String song = myFile + "";

            Mp3ClassPlayer.Play(song);

        }
    }//GEN-LAST:event_chooseFileMouseReleased

    private void loopPlayMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loopPlayMouseReleased
        switch (count) {
            case 0:
                count = 1;
                break;

            case 1:
                count = 0;
                break;

        }
    }//GEN-LAST:event_loopPlayMouseReleased

    private void VolumControlStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_VolumControlStateChanged
//Primary Sound Driver
   //     Speakers(High Defintion Audio Fevice)
      //  Port Speakers (High Definition Audio
        JSlider source;
        source = (JSlider) (evt.getSource());
        float gain;
        if (source.getValueIsAdjusting()) {
            gain = (float) source.getValue();
            soundVolume.setText(gain + "%");
            
            ///VolumeControl.setVolume(gain);
           Mp3ClassPlayer.setVouloum(gain);
        }

//        if (audio instanceof JavaSoundAudioDevice)
//        {
//            JavaSoundAudioDevice jsAudio = (JavaSoundAudioDevice) audio;
//            jsAudio.setLineGain(yourGainGoesHere);
//        }

    }//GEN-LAST:event_VolumControlStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SelectGame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SelectGame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SelectGame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SelectGame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SelectGame(current).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LogOutBtn;
    private javax.swing.JSlider VolumControl;
    private javax.swing.JLabel background;
    private javax.swing.JLabel chooseFile;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel loopPlay;
    private javax.swing.JLabel pause;
    private javax.swing.JLabel play;
    private javax.swing.JLabel soundVolume;
    private javax.swing.JLabel stop;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
